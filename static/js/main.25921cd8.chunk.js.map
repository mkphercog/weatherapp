{"version":3,"sources":["pages/Result.js","components/SettingsInput.js","pages/Settings.js","pages/ErrorPage.js","App.js","serviceWorker.js","index.js"],"names":["Result","weatherData","clickRefreshBtn","time","showSettings","main","name","weather","wind","sys","temp","feels_like","temp_min","temp_max","pressure","humidity","sunrise","sunset","sunUp","Date","sunDown","sunUpText","toUTCString","sunDownText","tempShow","toFixed","feelsLikeShow","minTempShow","maxTempShow","className","src","icon","alt","description","speed","slice","onClick","SettingsInput","valueInput","changeInput","type","value","onChange","placeholder","Settings","clickAddBtn","isMainTown","checkIsMainTown","isFavourite","checkIsFavourite","favouriteTowns","setMainTownBtn","deleteTownFromList","checkWeatherHere","settingsVisible","useState","visible","setVisible","fun","num","setTimeout","arrOfTowns","map","town","index","key","localStorage","getItem","style","display","opacity","htmlFor","id","checked","disabled","length","reverse","ErrorPage","errorMessage","APIKey","getLocalData","JSON","parse","NoResult","getLocalTimeOfData","getLocalListOfTowns","App","inputContent","setInputContent","setWeatherData","setIsMainTown","setIsFavourite","setTime","listOfFavouriteTowns","setListOfFavouriteTowns","err","setErr","setErrorMessage","setSettingVisible","firstVisitWeb","setFirstVisitWeb","useEffect","getDataAPI","setItem","getDate","dateClick","toLocaleDateString","timeClick","toLocaleTimeString","townName","API","fetch","then","res","ok","json","status","result","findIndex","toUpperCase","newArr","push","stringify","catch","console","log","Error","bool","e","target","arr","filter","item","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.25921cd8.chunk.js","sourcesContent":["import React from \"react\";\n// import ResultData from \"../components/ResultData\";\nimport \"../styles/Result.scss\";\n\nconst Result = ({ weatherData, clickRefreshBtn, time, showSettings }) => {\n  const { main, name, weather, wind, sys } = weatherData;\n\n  const { temp, feels_like, temp_min, temp_max, pressure, humidity } = main;\n\n  const { sunrise, sunset } = sys;\n\n  const sunUp = new Date((sunrise + 3600) * 1000);\n  const sunDown = new Date((sunset + 3600) * 1000);\n\n  const sunUpText = sunUp.toUTCString();\n  const sunDownText = sunDown.toUTCString();\n\n  const tempShow = temp < 0 && temp >= -0.49 ? 0 : temp.toFixed();\n  const feelsLikeShow =\n    feels_like < 0 && feels_like >= -0.49 ? 0 : feels_like.toFixed();\n  const minTempShow =\n    temp_min < 0 && temp_min >= -0.49 ? 0 : temp_min.toFixed();\n  const maxTempShow =\n    temp_max < 0 && temp_max >= -0.49 ? 0 : temp_max.toFixed();\n\n  return (\n    <div className=\"result\">\n      <div className=\"result__wrapper\">\n        <h1 className=\"result__townName\">{name}</h1>\n\n        <div className=\"result__wrapperTemp\">\n          <h2 className=\"result__temp\">{tempShow}°C</h2>\n          <p className=\"result__maxMinTemp\">{`${maxTempShow}°C / ${minTempShow}°C`}</p>\n        </div>\n\n        <img\n          className=\"result__weatherIcon\"\n          src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n          alt=\"Weather icon.\"\n        />\n\n        <div className=\"result__wrapperInfo\">\n          <p className=\"result__infoText\">\n            Opis: <span className=\"result__info\">{weather[0].description}</span>\n          </p>\n          <p className=\"result__infoText\">\n            Odczuwalna: <span className=\"result__info\">{feelsLikeShow}°C</span>\n          </p>\n          <p className=\"result__infoText\">\n            Ciśnienie: <span className=\"result__info\">{pressure} pHa</span>\n          </p>\n          <p className=\"result__infoText\">\n            Wilgotność: <span className=\"result__info\">{humidity}%</span>\n          </p>\n          <p className=\"result__infoText\">\n            Prędkość wiatru:{\" \"}\n            <span className=\"result__info\">{wind.speed * 3.6} km/h</span>\n          </p>\n          <p className=\"result__infoText\">\n            Wschód słońca:{\" \"}\n            <span className=\"result__info\">{sunUpText.slice(-12, -4)}</span>\n          </p>\n          <p className=\"result__infoText\">\n            Zachód słońca:{\" \"}\n            <span className=\"result__info\">{sunDownText.slice(-12, -4)}</span>\n          </p>\n        </div>\n\n        <div className=\"result__wrapperIcons\">\n          <i\n            onClick={clickRefreshBtn}\n            className=\"fas fa-sync-alt result__refreshIcon\"\n          ></i>\n          <i\n            onClick={() => showSettings(true)}\n            className=\"fas fa-cogs result__settingsIcon\"\n          ></i>\n        </div>\n\n        <p className=\"result__dateOfRefresh\">\n          Dane z: {time ? time : \"Brak danych\"}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\n\nconst SettingsInput = ({ valueInput, changeInput }) => {\n  return (\n    <input\n      type=\"text\"\n      value={valueInput}\n      onChange={changeInput}\n      className=\"settings__input\"\n      placeholder=\"Nazwa miasta...\"\n    />\n  );\n};\n\nexport default SettingsInput;\n","import React, { useState } from \"react\";\nimport SettingsInput from \"../components/SettingsInput\";\nimport \"../styles/Settings.scss\";\n\nconst Settings = ({\n  valueInput,\n  changeInput,\n  clickAddBtn,\n  isMainTown,\n  checkIsMainTown,\n  isFavourite,\n  checkIsFavourite,\n  favouriteTowns,\n  setMainTownBtn,\n  deleteTownFromList,\n  checkWeatherHere,\n  settingsVisible,\n  showSettings\n}) => {\n  const [visible, setVisible] = useState(0);\n  const animationSpeed = 10;\n\n  const fun = num => {\n    setVisible(visible + num);\n  };\n\n  if (settingsVisible && visible < 100) {\n    setTimeout(() => fun(5), animationSpeed);\n  }\n\n  if (!settingsVisible && visible > 0) {\n    setTimeout(() => fun(-5), animationSpeed);\n  }\n\n  let arrOfTowns = [];\n\n  if (favouriteTowns) {\n    arrOfTowns = favouriteTowns.map((town, index) => (\n      <li className=\"settings__listItem\" key={index}>\n        <div className=\"settings__wrapperIconName\">\n          {localStorage.getItem(\"townName\") === town ? (\n            <i className=\"fas fa-home settings__homeIcon\"></i>\n          ) : (\n            <i className=\"fas fa-home settings__homeIcon settings__homeIcon--disabled\"></i>\n          )}\n          <span className=\"settings__townName\">{town}</span>\n          <i\n            onClick={() => deleteTownFromList(town)}\n            className=\"fas fa-trash-alt settings__trashIcon\"\n          ></i>\n        </div>\n        <div className=\"settings__wrapperBtn\">\n          {localStorage.getItem(\"townName\") === town ? null : (\n            <button\n              className=\"settings__btn\"\n              onClick={() => setMainTownBtn(town)}\n            >\n              Główne miasto\n            </button>\n          )}\n          <button\n            className=\"settings__btn\"\n            onClick={() => checkWeatherHere(town)}\n          >\n            Sprawdź pogodę\n          </button>\n        </div>\n      </li>\n    ));\n  }\n\n  return (\n    <div\n      className=\"settings\"\n      style={{\n        display: `${visible !== 0 ? \"block\" : \"none\"}`,\n        opacity: `${visible}%`\n      }}\n    >\n      <div className=\"settings__wrapper\">\n        <h1 className=\"settings__title\">Ustawienia</h1>\n\n        <div className=\"settings__wrapperAddTown\">\n          <SettingsInput valueInput={valueInput} changeInput={changeInput} />\n          <button className=\"settings__btn\" onClick={clickAddBtn}>\n            Sprawdź pogodę\n          </button>\n          <label className=\"settings__checkLabel\" htmlFor=\"isMainTown\">\n            <input\n              type=\"checkbox\"\n              name=\"isMainTown\"\n              id=\"isMainTown\"\n              className=\"settings__check\"\n              checked={isMainTown}\n              onChange={checkIsMainTown}\n            />\n            Ustaw jako główne miasto.\n          </label>\n\n          <label className=\"settings__checkLabel\" htmlFor=\"isFavourite\">\n            <input\n              type=\"checkbox\"\n              name=\"isFavourite\"\n              id=\"isFavourite\"\n              className=\"settings__check\"\n              checked={isMainTown ? isMainTown : isFavourite}\n              onChange={checkIsFavourite}\n              disabled={isMainTown}\n            />\n            Dodaj do listy ulubionych miast.\n          </label>\n        </div>\n\n        {favouriteTowns.length ? (\n          <div className=\"settings__wrapperFavouriteList\">\n            <h3 className=\"settings__favouriteTitle\">Lista ulubionych miast</h3>\n            <ul className=\"settings__favouriteList\">{arrOfTowns.reverse()}</ul>\n          </div>\n        ) : (\n          <div className=\"settings__wrapperFavouriteList\">\n            <h3 className=\"settings__favouriteTitle\">Lista ulubionych miast</h3>\n            <ul className=\"settings__favouriteList\">\n              <li className=\"settings__listItem\">Brak danych.</li>\n            </ul>\n          </div>\n        )}\n        <i\n          className=\"fas fa-times settings__close\"\n          onClick={() => showSettings(false)}\n        ></i>\n        <p className=\"settings__author\">Projekt i realizacja: Marcin Hercog</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\nimport \"../styles/ErrorPage.scss\";\n\nconst ErrorPage = ({ errorMessage }) => {\n  return (\n    <div className=\"errorPage\">\n      <h1 className=\"errorPage__message\">{errorMessage}</h1>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { useState, useEffect } from \"react\";\nimport Result from \"./pages/Result\";\nimport Settings from \"./pages/Settings\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport NoResult from \"./NoResult.json\";\nimport \"./styles/App.scss\";\n\n//WEBSITE: http://api.openweathermap.org/data/2.5/weather?q=${townName}&APPID=${APIKey}&lang=pl&units=metric\nconst APIKey = \"0d90c0d99506c2d578ef4a5f8468ce4f\";\n//My key: 0d90c0d99506c2d578ef4a5f8468ce4f\n//My other key: 7eee9c2a3bb4e9f3e8da0776821d2ca0\n\n// LOCALSTORAGE --\nconst getLocalData = localStorage.getItem(\"localData\")\n  ? JSON.parse(localStorage.getItem(\"localData\"))\n  : NoResult;\n\nconst getLocalTimeOfData = localStorage.getItem(\"timeOfData\")\n  ? localStorage.getItem(\"timeOfData\")\n  : \"\";\n\nconst getLocalListOfTowns = localStorage.getItem(\"favouriteTownsList\")\n  ? JSON.parse(localStorage.getItem(\"favouriteTownsList\"))\n  : [];\n//--\n\nfunction App() {\n  //HOOKS HERE\n  const [inputContent, setInputContent] = useState(\"\");\n  const [weatherData, setWeatherData] = useState(getLocalData);\n  const [isMainTown, setIsMainTown] = useState(false);\n  const [isFavourite, setIsFavourite] = useState(false);\n  const [time, setTime] = useState(getLocalTimeOfData);\n  const [listOfFavouriteTowns, setListOfFavouriteTowns] = useState(\n    getLocalListOfTowns\n  );\n  const [err, setErr] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [settingsVisible, setSettingVisible] = useState(false);\n  const [firstVisitWeb, setFirstVisitWeb] = useState(true);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"townName\")) {\n      localStorage.setItem(\"townName\", \"Warszawa\");\n      getDataAPI(\"Warszawa\");\n    } else if (localStorage.getItem(\"townName\") && firstVisitWeb) {\n      setFirstVisitWeb(false);\n      getDataAPI(localStorage.getItem(\"townName\"));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [firstVisitWeb]);\n  // --\n\n  //GET TIME\n  const getDate = () => {\n    const dateClick = new Date().toLocaleDateString();\n    const timeClick = new Date().toLocaleTimeString();\n    return `${dateClick}, ${timeClick}`;\n  };\n  // --\n\n  //ONE FETCH FUNCTION\n  const getDataAPI = (townName = inputContent) => {\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${townName}&APPID=${APIKey}&lang=pl&units=metric`;\n    const time = getDate();\n\n    fetch(API)\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw res.status;\n        }\n      })\n      .then(result => {\n        if (townName === inputContent) {\n          if (isFavourite || isMainTown) {\n            const checkDoubleName = listOfFavouriteTowns.findIndex(\n              town => town.toUpperCase() === townName.toUpperCase()\n            );\n            if (checkDoubleName === -1) {\n              let newArr = listOfFavouriteTowns;\n              newArr.push(townName);\n\n              localStorage.setItem(\n                \"favouriteTownsList\",\n                JSON.stringify(newArr)\n              );\n              setListOfFavouriteTowns(newArr);\n\n              if (isMainTown) {\n                localStorage.setItem(\"townName\", townName);\n                localStorage.setItem(\"localData\", JSON.stringify(result));\n                setSettingVisible(false);\n              }\n            } else {\n              setErr(true);\n              setErrorMessage(\"Miaso istnieje już na liście!\");\n              setTimeout(() => setErr(false), 2000);\n            }\n          }\n        }\n\n        if (townName === localStorage.getItem(\"townName\")) {\n          localStorage.setItem(\"localData\", JSON.stringify(result));\n          localStorage.setItem(\"timeOfData\", time);\n          setTime(localStorage.getItem(\"timeOfData\"));\n        } else {\n          setTime(time);\n        }\n\n        setWeatherData(result);\n        if (!isMainTown && !isFavourite) {\n          setSettingVisible(false);\n        }\n      })\n      .catch(err => {\n        console.log(new Error(err));\n        setErr(true);\n        if (!localStorage.getItem(\"townName\")) {\n          setErrorMessage(\"Brak przypisanego miasta głównego!\");\n        } else {\n          setErrorMessage(\n            `Nie istnieje miasto o nazwie ${inputContent.toUpperCase()}!`\n          );\n        }\n        setTimeout(() => setErr(false), 2000);\n      });\n  };\n  // --\n\n  const handleClickAddTown = () => {\n    if (inputContent === \"\") {\n      setErr(true);\n      setErrorMessage(\"Wpisz nazwę miasta!\");\n      setTimeout(() => setErr(false), 2000);\n    } else {\n      getDataAPI();\n      setInputContent(\"\");\n      setIsFavourite(false);\n      setIsMainTown(false);\n    }\n  };\n\n  const handleClickBtnRefresh = () => {\n    getDataAPI(localStorage.getItem(\"townName\"));\n  };\n\n  const setMainTownBtn = town => {\n    localStorage.setItem(\"townName\", town);\n    getDataAPI(localStorage.getItem(\"townName\"));\n  };\n\n  const checkWeatherHere = town => {\n    getDataAPI(town);\n    setSettingVisible(false);\n  };\n\n  const handleChangeInputSettings = e => {\n    setInputContent(e.target.value);\n  };\n\n  const handleChangeIsMainTown = () => {\n    setIsMainTown(!isMainTown);\n  };\n\n  const handleChangeIsFavourite = () => {\n    setIsFavourite(!isFavourite);\n  };\n\n  const deleteTownFromList = town => {\n    const arr = listOfFavouriteTowns.filter(item => item !== town);\n    setListOfFavouriteTowns(arr);\n    if (town === localStorage.getItem(\"townName\")) {\n      localStorage.clear();\n      setWeatherData(NoResult);\n      setTime(\"\");\n    }\n    localStorage.setItem(\"favouriteTownsList\", JSON.stringify(arr));\n  };\n\n  const showSettings = bool => {\n    setSettingVisible(bool);\n  };\n\n  return (\n    <div className=\"app\">\n      <Result\n        weatherData={weatherData}\n        clickRefreshBtn={handleClickBtnRefresh}\n        time={time}\n        showSettings={showSettings}\n      />\n\n      <Settings\n        valueInput={inputContent}\n        changeInput={handleChangeInputSettings}\n        clickAddBtn={handleClickAddTown}\n        isMainTown={isMainTown}\n        checkIsMainTown={handleChangeIsMainTown}\n        isFavourite={isFavourite}\n        checkIsFavourite={handleChangeIsFavourite}\n        favouriteTowns={listOfFavouriteTowns}\n        setMainTownBtn={setMainTownBtn}\n        deleteTownFromList={deleteTownFromList}\n        checkWeatherHere={checkWeatherHere}\n        settingsVisible={settingsVisible}\n        showSettings={showSettings}\n      />\n\n      {err ? <ErrorPage errorMessage={errorMessage} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}