{"version":3,"sources":["images/greenVillage.jpg","images/rain.jpg","images/summer.jpg","images/thunder.jpg","images/winter.jpg","components/BtnRefreshData.js","components/BtnShowSettings.js","pages/Result.js","components/SettingsInput.js","components/BtnAddTown.js","components/CheckBoxes.js","components/FavouriteTownList.js","components/CloseSettings.js","pages/Settings.js","pages/ErrorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BtnRefreshData","scrollUp","clickRefreshBtn","onClick","className","BtnShowSettings","showSettings","Result","weatherData","time","main","name","weather","wind","sys","temp","feels_like","temp_min","temp_max","pressure","humidity","sunrise","sunset","sunUp","Date","sunDown","sunUpText","toUTCString","sunDownText","windKmH","speed","tempShow","toFixed","feelsLikeShow","minTempShow","maxTempShow","document","getElementById","scrollTop","setTimeout","photoResult","greenVillage","winter","summer","description","includes","rain","thunder","style","backgroundImage","id","src","icon","alt","slice","SettingsInput","valueInput","changeInput","type","value","onChange","placeholder","BtnAddTown","clickAddBtn","CheckBoxes","isMainTown","checkIsMainTown","isFavourite","text","checked","fun","checkIsFavourite","disabled","map","item","key","htmlFor","FavouriteTownList","favouriteTowns","setMainTownBtn","deleteTownFromList","checkWeatherHere","arrOfTowns","town","index","localStorage","getItem","mainTown","find","props","children","otherTowns","filter","reverse","CloseSettings","Settings","settingsVisible","useState","visible","setVisible","settingsAnimation","num","display","opacity","length","ErrorPage","errorMessage","APIKey","getLocalData","JSON","parse","NoResult","getLocalTimeOfData","getLocalListOfTowns","App","inputContent","setInputContent","setWeatherData","setIsMainTown","setIsFavourite","setTime","listOfFavouriteTowns","setListOfFavouriteTowns","err","setErr","setErrorMessage","setSettingVisible","firstVisitWeb","setFirstVisitWeb","useEffect","getDataAPI","setItem","getDate","dateClick","toLocaleDateString","timeClick","toLocaleTimeString","townName","API","fetch","then","res","ok","json","status","result","trim","findIndex","toUpperCase","newArr","push","stringify","catch","console","log","Error","bool","e","target","inputTrimed","arr","clear","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c606c2f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greenVillage.f2d72682.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.0e54c1a2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/summer.41cb5f87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.c416d247.jpg\";","module.exports = __webpack_public_path__ + \"static/media/winter.ff7c4633.jpg\";","import React from \"react\";\n\nconst BtnRefreshData = ({ scrollUp, clickRefreshBtn }) => {\n  return (\n    <i\n      onClick={() => {\n        scrollUp();\n        clickRefreshBtn();\n      }}\n      className=\"fas fa-sync-alt result__refreshIcon\"\n    ></i>\n  );\n};\n\nexport default BtnRefreshData;\n","import React from \"react\";\n\nconst BtnShowSettings = ({ scrollUp, showSettings }) => {\n  return (\n    <i\n      onClick={() => {\n        scrollUp();\n        showSettings(true);\n      }}\n      className=\"fas fa-cogs result__settingsIcon\"\n    ></i>\n  );\n};\n\nexport default BtnShowSettings;\n","import React from \"react\";\nimport BtnRefreshData from \"../components/BtnRefreshData\";\nimport BtnShowSettings from \"../components/BtnShowSettings\";\nimport greenVillage from \"../images/greenVillage.jpg\";\nimport rain from \"../images/rain.jpg\";\nimport summer from \"../images/summer.jpg\";\nimport thunder from \"../images/thunder.jpg\";\nimport winter from \"../images/winter.jpg\";\nimport \"../styles/Result.scss\";\n\nconst Result = ({ weatherData, clickRefreshBtn, time, showSettings }) => {\n  const { main, name, weather, wind, sys } = weatherData;\n  const { temp, feels_like, temp_min, temp_max, pressure, humidity } = main;\n  const { sunrise, sunset } = sys;\n\n  const sunUp = new Date((sunrise + 3600) * 1000);\n  const sunDown = new Date((sunset + 3600) * 1000);\n  const sunUpText = sunUp.toUTCString();\n  const sunDownText = sunDown.toUTCString();\n\n  const windKmH = wind.speed * 3.6;\n\n  const tempShow = temp < 0 && temp >= -0.49 ? 0 : temp.toFixed();\n  const feelsLikeShow =\n    feels_like < 0 && feels_like >= -0.49 ? 0 : feels_like.toFixed();\n  const minTempShow =\n    temp_min < 0 && temp_min >= -0.49 ? 0 : temp_min.toFixed();\n  const maxTempShow =\n    temp_max < 0 && temp_max >= -0.49 ? 0 : temp_max.toFixed();\n\n  const scrollUp = () => {\n    if (document.getElementById(\"result__wrapper\").scrollTop > 0) {\n      document.getElementById(\"result__wrapper\").scrollTop -= 5;\n      setTimeout(scrollUp, 5);\n    }\n  };\n\n  let photoResult = greenVillage;\n\n  if (temp <= 0) {\n    photoResult = winter;\n  } else if (temp > 0 && temp <= 20) {\n    photoResult = greenVillage;\n  } else if (temp > 20) {\n    photoResult = summer;\n  }\n\n  if (weather[0].description.includes(\"deszcz\")) {\n    photoResult = rain;\n  }\n  if (weather[0].description.includes(\"burz\")) {\n    photoResult = thunder;\n  }\n\n  return (\n    <div\n      className=\"result\"\n      style={{\n        backgroundImage: `url(\"${photoResult}\")`\n      }}\n    >\n      <div className=\"result__wrapper\" id=\"result__wrapper\">\n        <h1 className=\"result__townName\">{name}</h1>\n\n        <div className=\"result__wrapperTemp\">\n          <h2 className=\"result__temp\">{tempShow}°C</h2>\n          <p className=\"result__maxMinTemp\">{`${maxTempShow}°C / ${minTempShow}°C`}</p>\n        </div>\n\n        <img\n          className=\"result__weatherIcon\"\n          src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n          alt=\"Weather icon.\"\n        />\n\n        <div className=\"result__wrapperInfo\">\n          <p className=\"result__infoText\">\n            Opis: <span className=\"result__info\">{weather[0].description}</span>\n          </p>\n          <p className=\"result__infoText\">\n            Odczuwalna: <span className=\"result__info\">{feelsLikeShow}°C</span>\n          </p>\n          <p className=\"result__infoText\">\n            Ciśnienie: <span className=\"result__info\">{pressure} pHa</span>\n          </p>\n          <p className=\"result__infoText\">\n            Wilgotność: <span className=\"result__info\">{humidity}%</span>\n          </p>\n          <p className=\"result__infoText\">\n            Prędkość wiatru:{\" \"}\n            <span className=\"result__info\">{windKmH.toFixed(2)} km/h</span>\n          </p>\n          <p className=\"result__infoText\">\n            Wschód słońca:{\" \"}\n            <span className=\"result__info\">{sunUpText.slice(-12, -4)}</span>\n          </p>\n          <p className=\"result__infoText\">\n            Zachód słońca:{\" \"}\n            <span className=\"result__info\">{sunDownText.slice(-12, -4)}</span>\n          </p>\n        </div>\n\n        <div className=\"result__wrapperIcons\">\n          <BtnRefreshData\n            scrollUp={scrollUp}\n            clickRefreshBtn={clickRefreshBtn}\n          />\n          <BtnShowSettings scrollUp={scrollUp} showSettings={showSettings} />\n        </div>\n\n        <p className=\"result__dateOfRefresh\">\n          Dane z: {time ? time : \"Brak danych\"}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\n\nconst SettingsInput = ({ valueInput, changeInput }) => {\n  return (\n    <input\n      type=\"text\"\n      value={valueInput}\n      onChange={changeInput}\n      className=\"settings__input\"\n      placeholder=\"Nazwa miasta...\"\n    />\n  );\n};\n\nexport default SettingsInput;\n","import React from \"react\";\n\nconst BtnAddTown = ({ clickAddBtn }) => {\n  return (\n    <button className=\"settings__btn\" onClick={clickAddBtn}>\n      Sprawdź pogodę\n    </button>\n  );\n};\n\nexport default BtnAddTown;\n","import React from \"react\";\n\nconst CheckBoxes = ({\n  isMainTown,\n  checkIsMainTown,\n  isFavourite,\n  checkIsFavourite\n}) => {\n  const check = [\n    {\n      text: \"Ustaw jako główne miasto.\",\n      name: \"isMainTown\",\n      checked: isMainTown,\n      fun: checkIsMainTown\n    },\n    {\n      text: \"Dodaj do listy ulubionych miast.\",\n      name: \"isFavourite\",\n      checked: isMainTown ? isMainTown : isFavourite,\n      fun: checkIsFavourite,\n      disabled: isMainTown\n    }\n  ];\n\n  const checkBoxes = check.map(item => (\n    <label key={item.text} className=\"settings__checkLabel\" htmlFor={item.name}>\n      <input\n        type=\"checkbox\"\n        name={item.name}\n        id={item.name}\n        className=\"settings__check\"\n        checked={item.checked}\n        onChange={item.fun}\n        disabled={item.disabled}\n      />\n      {item.text}\n    </label>\n  ));\n  return checkBoxes;\n};\n\nexport default CheckBoxes;\n","import React from \"react\";\n\nconst FavouriteTownList = ({\n  favouriteTowns,\n  setMainTownBtn,\n  deleteTownFromList,\n  checkWeatherHere\n}) => {\n  const arrOfTowns = favouriteTowns.map((town, index) => (\n    <li className=\"settings__listItem\" key={index}>\n      <div className=\"settings__wrapperIconName\">\n        {localStorage.getItem(\"townName\") === town ? (\n          <i className=\"fas fa-home settings__homeIcon\"></i>\n        ) : (\n          <i className=\"fas fa-home settings__homeIcon settings__homeIcon--disabled\"></i>\n        )}\n        <span className=\"settings__townName\">{town}</span>\n        <i\n          onClick={() => deleteTownFromList(town)}\n          className=\"fas fa-trash-alt settings__trashIcon\"\n        ></i>\n      </div>\n      <div className=\"settings__wrapperBtn\">\n        {localStorage.getItem(\"townName\") === town ? null : (\n          <button\n            className=\"settings__btn\"\n            onClick={() => setMainTownBtn(town)}\n          >\n            Główne miasto\n          </button>\n        )}\n        <button\n          className=\"settings__btn\"\n          onClick={() => checkWeatherHere(town)}\n        >\n          Sprawdź pogodę\n        </button>\n      </div>\n    </li>\n  ));\n\n  const mainTown = arrOfTowns.find(\n    item =>\n      item.props.children[0].props.children[0].props.className ===\n      \"fas fa-home settings__homeIcon\"\n  );\n  const otherTowns = arrOfTowns.filter(item => item !== mainTown);\n\n  const showTowns = [mainTown, otherTowns.reverse()];\n\n  return showTowns;\n};\n\nexport default FavouriteTownList;\n","import React from \"react\";\n\nconst CloseSettings = ({ showSettings }) => {\n  return (\n    <i\n      className=\"fas fa-times settings__close\"\n      onClick={() => showSettings(false)}\n    ></i>\n  );\n};\n\nexport default CloseSettings;\n","import React, { useState } from \"react\";\nimport SettingsInput from \"../components/SettingsInput\";\nimport BtnAddTown from \"../components/BtnAddTown\";\nimport CheckBoxes from \"../components/CheckBoxes\";\nimport FavouriteTownList from \"../components/FavouriteTownList\";\nimport CloseSettings from \"../components/CloseSettings\";\nimport \"../styles/Settings.scss\";\n\nconst Settings = ({\n  valueInput,\n  changeInput,\n  clickAddBtn,\n  isMainTown,\n  checkIsMainTown,\n  isFavourite,\n  checkIsFavourite,\n  favouriteTowns,\n  setMainTownBtn,\n  deleteTownFromList,\n  checkWeatherHere,\n  settingsVisible,\n  showSettings\n}) => {\n  const [visible, setVisible] = useState(0);\n  const animationSpeed = 10;\n\n  const settingsAnimation = num => {\n    setVisible(visible + num);\n  };\n\n  const scrollUp = () => {\n    if (document.getElementById(\"settings\").scrollTop > 0) {\n      document.getElementById(\"settings\").scrollTop -= 5;\n      setTimeout(scrollUp, 10);\n    }\n  };\n\n  if (settingsVisible && visible < 100) {\n    scrollUp();\n    setTimeout(() => settingsAnimation(5), animationSpeed);\n  }\n\n  if (!settingsVisible && visible > 0) {\n    setTimeout(() => settingsAnimation(-5), animationSpeed);\n  }\n\n  return (\n    <div\n      className=\"settings\"\n      id=\"settings\"\n      style={{\n        display: `${visible !== 0 ? \"block\" : \"none\"}`,\n        opacity: `${visible}%`\n      }}\n    >\n      <div className=\"settings__wrapper\">\n        <h1 className=\"settings__title\">Ustawienia</h1>\n\n        <div className=\"settings__wrapperAddTown\">\n          <SettingsInput valueInput={valueInput} changeInput={changeInput} />\n          <BtnAddTown clickAddBtn={clickAddBtn} />\n          <CheckBoxes\n            isMainTown={isMainTown}\n            checkIsMainTown={checkIsMainTown}\n            isFavourite={isFavourite}\n            checkIsFavourite={checkIsFavourite}\n          />\n        </div>\n\n        <div className=\"settings__wrapperFavouriteList\">\n          <h3 className=\"settings__favouriteTitle\">Lista ulubionych miast</h3>\n          <ul className=\"settings__favouriteList\">\n            {favouriteTowns.length ? (\n              <FavouriteTownList\n                favouriteTowns={favouriteTowns}\n                setMainTownBtn={setMainTownBtn}\n                deleteTownFromList={deleteTownFromList}\n                checkWeatherHere={checkWeatherHere}\n              />\n            ) : (\n              <li className=\"settings__listItem\">Brak danych.</li>\n            )}\n          </ul>\n        </div>\n        <CloseSettings showSettings={showSettings} />\n\n        <p className=\"settings__author\">Projekt i realizacja: Marcin Hercog</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\nimport \"../styles/ErrorPage.scss\";\n\nconst ErrorPage = ({ errorMessage }) => {\n  return (\n    <div className=\"errorPage\">\n      <h1 className=\"errorPage__message\">{errorMessage}</h1>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { useState, useEffect } from \"react\";\nimport Result from \"./pages/Result\";\nimport Settings from \"./pages/Settings\";\nimport ErrorPage from \"./pages/ErrorPage\";\nimport NoResult from \"./NoResult.json\";\nimport \"./styles/App.scss\";\n\n//WEBSITE: https://api.openweathermap.org/data/2.5/weather?q=${townName}&APPID=${APIKey}&lang=pl&units=metric\nconst APIKey = \"0d90c0d99506c2d578ef4a5f8468ce4f\";\n//My key: 0d90c0d99506c2d578ef4a5f8468ce4f\n//My other key: 7eee9c2a3bb4e9f3e8da0776821d2ca0\n\n// LOCALSTORAGE --\nconst getLocalData = localStorage.getItem(\"localData\")\n  ? JSON.parse(localStorage.getItem(\"localData\"))\n  : NoResult;\n\nconst getLocalTimeOfData = localStorage.getItem(\"timeOfData\")\n  ? localStorage.getItem(\"timeOfData\")\n  : \"\";\n\nconst getLocalListOfTowns = localStorage.getItem(\"favouriteTownsList\")\n  ? JSON.parse(localStorage.getItem(\"favouriteTownsList\"))\n  : [];\n//--\n\nfunction App() {\n  //HOOKS HERE\n  const [inputContent, setInputContent] = useState(\"\");\n  const [weatherData, setWeatherData] = useState(getLocalData);\n  const [isMainTown, setIsMainTown] = useState(false);\n  const [isFavourite, setIsFavourite] = useState(false);\n  const [time, setTime] = useState(getLocalTimeOfData);\n  const [listOfFavouriteTowns, setListOfFavouriteTowns] = useState(\n    getLocalListOfTowns\n  );\n  const [err, setErr] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [settingsVisible, setSettingVisible] = useState(false);\n  const [firstVisitWeb, setFirstVisitWeb] = useState(true);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"townName\")) {\n      localStorage.setItem(\"townName\", \"Warszawa\");\n      getDataAPI(\"Warszawa\");\n    } else if (localStorage.getItem(\"townName\") && firstVisitWeb) {\n      setFirstVisitWeb(false);\n      getDataAPI(localStorage.getItem(\"townName\"));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [firstVisitWeb]);\n  // --\n\n  //GET TIME\n  const getDate = () => {\n    const dateClick = new Date().toLocaleDateString();\n    const timeClick = new Date().toLocaleTimeString();\n    return `${dateClick}, ${timeClick}`;\n  };\n  // --\n\n  //ONE FETCH FUNCTION\n  const getDataAPI = (townName = inputContent) => {\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${townName}&APPID=${APIKey}&lang=pl&units=metric`;\n    const time = getDate();\n\n    fetch(API)\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          throw res.status;\n        }\n      })\n      .then(result => {\n        if (townName === inputContent.trim()) {\n          if (isFavourite || isMainTown) {\n            const checkDoubleName = listOfFavouriteTowns.findIndex(\n              town => town.toUpperCase() === townName.toUpperCase()\n            );\n            if (checkDoubleName === -1) {\n              let newArr = listOfFavouriteTowns;\n              newArr.push(townName);\n\n              localStorage.setItem(\n                \"favouriteTownsList\",\n                JSON.stringify(newArr)\n              );\n              setListOfFavouriteTowns(newArr);\n\n              if (isMainTown) {\n                localStorage.setItem(\"townName\", townName);\n                localStorage.setItem(\"localData\", JSON.stringify(result));\n                setSettingVisible(false);\n              }\n            } else {\n              setErr(true);\n              setErrorMessage(\"Miaso istnieje już na liście!\");\n              setTimeout(() => setErr(false), 2000);\n            }\n          }\n        }\n\n        if (townName === localStorage.getItem(\"townName\")) {\n          localStorage.setItem(\"localData\", JSON.stringify(result));\n          localStorage.setItem(\"timeOfData\", time);\n          setTime(localStorage.getItem(\"timeOfData\"));\n        } else {\n          setTime(time);\n        }\n\n        setWeatherData(result);\n        if (!isMainTown && !isFavourite) {\n          setSettingVisible(false);\n        }\n      })\n      .catch(err => {\n        console.log(new Error(err));\n        setErr(true);\n        if (!localStorage.getItem(\"townName\")) {\n          setErrorMessage(\"Brak przypisanego miasta głównego!\");\n        } else {\n          setErrorMessage(\n            `Nie istnieje miasto o nazwie ${inputContent.toUpperCase()}!`\n          );\n        }\n        setTimeout(() => setErr(false), 2000);\n      });\n  };\n  // --\n\n  const handleClickAddTown = () => {\n    if (inputContent === \"\") {\n      setErr(true);\n      setErrorMessage(\"Wpisz nazwę miasta!\");\n      setTimeout(() => setErr(false), 2000);\n    } else {\n      const inputTrimed = inputContent.trim();\n      getDataAPI(inputTrimed);\n      setInputContent(\"\");\n      setIsFavourite(false);\n      setIsMainTown(false);\n    }\n  };\n\n  const handleClickBtnRefresh = () => {\n    getDataAPI(localStorage.getItem(\"townName\"));\n  };\n\n  const setMainTownBtn = town => {\n    localStorage.setItem(\"townName\", town);\n    getDataAPI(localStorage.getItem(\"townName\"));\n  };\n\n  const checkWeatherHere = town => {\n    getDataAPI(town);\n    setSettingVisible(false);\n  };\n\n  const handleChangeInputSettings = e => {\n    setInputContent(e.target.value);\n  };\n\n  const handleChangeIsMainTown = () => {\n    setIsMainTown(!isMainTown);\n  };\n\n  const handleChangeIsFavourite = () => {\n    setIsFavourite(!isFavourite);\n  };\n\n  const deleteTownFromList = town => {\n    const arr = listOfFavouriteTowns.filter(item => item !== town);\n    setListOfFavouriteTowns(arr);\n    if (town === localStorage.getItem(\"townName\")) {\n      localStorage.clear();\n      setWeatherData(NoResult);\n      setTime(\"\");\n    }\n    localStorage.setItem(\"favouriteTownsList\", JSON.stringify(arr));\n  };\n\n  const showSettings = bool => {\n    setSettingVisible(bool);\n  };\n\n  return (\n    <div className=\"app\">\n      <Result\n        weatherData={weatherData}\n        clickRefreshBtn={handleClickBtnRefresh}\n        time={time}\n        showSettings={showSettings}\n      />\n\n      <Settings\n        valueInput={inputContent}\n        changeInput={handleChangeInputSettings}\n        clickAddBtn={handleClickAddTown}\n        isMainTown={isMainTown}\n        checkIsMainTown={handleChangeIsMainTown}\n        isFavourite={isFavourite}\n        checkIsFavourite={handleChangeIsFavourite}\n        favouriteTowns={listOfFavouriteTowns}\n        setMainTownBtn={setMainTownBtn}\n        deleteTownFromList={deleteTownFromList}\n        checkWeatherHere={checkWeatherHere}\n        settingsVisible={settingsVisible}\n        showSettings={showSettings}\n      />\n\n      {err ? <ErrorPage errorMessage={errorMessage} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}