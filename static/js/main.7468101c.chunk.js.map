{"version":3,"sources":["images/greenVillage.jpg","images/rain.jpg","images/summer.jpg","images/thunder.jpg","images/winter.jpg","serviceWorker.js","store/actions/fetchDataAction.js","store/types/index.js","store/actions/scrollsUp.js","App/ResultView/BtnRefreshData/BtnRefreshData.js","App/ResultView/BtnShowSettings/BtnShowSettings.js","store/actions/settingsVisibleActions.js","App/ResultView/ResultView.js","store/actions/settingsInputContentAction.js","App/SettingsView/SettingsInput/SettingsInput.js","App/SettingsView/BtnCheckTown/BtnCheckTown.js","store/actions/localStorageActions.js","App/SettingsView/FavouriteTownList/BtnCheckWeather/BtnCheckWeather.js","store/actions/townsListActions.js","App/SettingsView/FavouriteTownList/BtnSetMainTown/BtnSetMainTown.js","App/SettingsView/FavouriteTownList/BtnTrash/BtnTrash.js","App/SettingsView/FavouriteTownList/FavouriteTownList.js","App/SettingsView/CloseSettings/CloseSettings.js","App/SettingsView/BtnAddToList/BtnAddToList.js","App/SettingsView/SettingsView.js","App/ErrorView/ErrorView.js","App/LoadingView/LoadingView.js","store/reducers/fetchDataReducer.js","store/reducers/townsListReducer.js","store/reducers/settingsInputContentReducer.js","store/reducers/settingsVisibleReducer.js","store/reducers/index.js","store/index.js","index.js","App/App.js"],"names":["module","exports","Boolean","window","location","hostname","match","fetchData","townName","URL","date","Date","toLocaleDateString","time","toLocaleTimeString","dispatch","type","axios","get","then","res","status","payload","data","dateOfData","catch","err","response","message","resultScrollUp","document","getElementById","scrollTop","setTimeout","BtnRefreshData","mainTown","useSelector","state","townList","useDispatch","onClick","className","BtnShowSettings","ResultView","dataOfTown","townData","main","name","weather","wind","sys","temp","feels_like","temp_min","temp_max","pressure","humidity","sunrise","sunset","weatherData","windKmH","speed","toFixed","sunUp","toUTCString","slice","sunDown","tempShow","feelsLikeShow","minTempShow","maxTempShow","photoResult","greenVillage","icon","includes","winter","summer","rain","thunder","style","backgroundImage","id","src","alt","description","settingsInputContent","value","settingsInputEmpty","isEmpty","SettingsInput","classes","onChange","e","target","placeholder","BtnCheckTown","inputValue","townWithoutExtraSpaces","replace","trim","GetLocalMainTown","localStorage","getItem","SetLocalMainTown","setItem","GetLocalListOfTowns","JSON","parse","SetLocalListOfTowns","newListOfTowns","stringify","BtnCheckWeather","town","setMainTown","BtnSetMainTown","BtnTrash","mainTownRedux","FavouriteTownList","towns","arrOfTowns","map","index","key","find","item","props","children","otherTowns","filter","showTowns","reverse","length","CloseSettings","BtnAddToList","currentTown","currentTownList","isTownOnListOrNoResult","classNames","disabled","SettingsView","isVisible","settingsVisible","useState","visible","setVisible","settingsAnimation","num","settingsScrollUp","display","opacity","href","rel","ErrorView","errorMessage","LoadingView","INITIAL_STATE","featching","featched","NoResult","error","rootReducer","combineReducers","action","listWithoutTown","devTools","composeWithDevTools","applyMiddleware","thunk","store","createStore","ReactDOM","render","townsList","isFeatching","isError","useEffect","randomIndex","Math","floor","random","clear","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7468101c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/greenVillage.f2d72682.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.0e54c1a2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/summer.41cb5f87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.c416d247.jpg\";","module.exports = __webpack_public_path__ + \"static/media/winter.ff7c4633.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\nimport axios from \"axios\";\n\nexport const fetchData = townName => {\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${townName}&APPID=0d90c0d99506c2d578ef4a5f8468ce4f&lang=pl&units=metric`;\n  const date = new Date().toLocaleDateString();\n  const time = new Date().toLocaleTimeString();\n\n  return dispatch => {\n    dispatch({\n      type: DATA_FETCHING\n    });\n\n    axios\n      .get(URL)\n      .then(res => {\n        if (res.status === 200) {\n          dispatch({\n            type: DATA_FETCHED,\n            payload: res.data,\n            dateOfData: `${date}, ${time}`\n          });\n        }\n        return res.status;\n      })\n      .catch(err => {\n        dispatch({\n          type: DATA_ERROR,\n          payload: err.response.data.message\n        });\n      });\n  };\n};\n","export const DATA_FETCHING = \"DATA_FETCHING\";\nexport const DATA_FETCHED = \"DATA_FETCHED\";\nexport const DATA_ERROR = \"DATA_ERROR\";\n\nexport const ADD_TOWN_TO_LIST = \"ADD_TOWN_TO_LIST\";\nexport const DELETE_TOWN_FROM_LIST = \"DELETE_TOWN_FROM_LIST\";\nexport const DEFAULT_TOWN_STATE = \"DEFAULT_TOWN_STATE\";\nexport const SET_MAIN_TOWN = \"SET_MAIN_TOWN\";\n\nexport const CHANGE_SETTINGS_INPUT_CONTENT = \"CHANGE_SETTINGS_INPUT_CONTENT\";\nexport const SETTINGS_INPUT_EMPTY = \"SETTINGS_INPUT_EMPTY\";\n\nexport const SHOW_SETTINGS = \"SHOW_SETTINGS\";\nexport const HIDE_SETTINGS = \"HIDE_SETTINGS\";\n","export const resultScrollUp = () => {\n  if (document.getElementById(\"resultView__wrapper\").scrollTop > 0) {\n    document.getElementById(\"resultView__wrapper\").scrollTop -= 5;\n    setTimeout(resultScrollUp, 5);\n  }\n};\n\nexport const settingsScrollUp = () => {\n  if (document.getElementById(\"settingsView\").scrollTop > 0) {\n    document.getElementById(\"settingsView\").scrollTop -= 5;\n    setTimeout(settingsScrollUp, 10);\n  }\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchData } from \"../../../store/actions/fetchDataAction\";\nimport { resultScrollUp } from \"../../../store/actions/scrollsUp\";\nimport \"./BtnRefreshData.scss\";\n\nexport const BtnRefreshData = () => {\n  const mainTown = useSelector(state => state.townList.mainTown);\n  const dispatch = useDispatch();\n\n  return (\n    <i\n      onClick={() => {\n        dispatch(fetchData(mainTown));\n        resultScrollUp();\n      }}\n      className=\"fas fa-sync-alt resultView__refreshIcon\"\n    ></i>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { showSettings } from \"../../../store/actions/settingsVisibleActions\";\nimport { resultScrollUp } from \"../../../store/actions/scrollsUp\";\nimport \"./BtnShowSettings.scss\";\n\nexport const BtnShowSettings = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <i\n      onClick={() => {\n        dispatch(showSettings());\n        resultScrollUp();\n      }}\n      className=\"fas fa-cogs resultView__settingsIcon\"\n    ></i>\n  );\n};\n","import { SHOW_SETTINGS, HIDE_SETTINGS } from \"../types\";\n\nexport const showSettings = () => ({\n  type: SHOW_SETTINGS\n});\n\nexport const hideSettings = () => ({\n  type: HIDE_SETTINGS\n});\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BtnRefreshData } from \"./BtnRefreshData/BtnRefreshData\";\nimport { BtnShowSettings } from \"./BtnShowSettings/BtnShowSettings\";\nimport greenVillage from \"../../images/greenVillage.jpg\";\nimport rain from \"../../images/rain.jpg\";\nimport summer from \"../../images/summer.jpg\";\nimport thunder from \"../../images/thunder.jpg\";\nimport winter from \"../../images/winter.jpg\";\nimport \"./ResultView.scss\";\n\nexport const ResultView = () => {\n  const dateOfData = useSelector(state => state.fetchData.dateOfData);\n  const dataOfTown = useSelector(state => state.fetchData.townData);\n  const mainTown = useSelector(state => state.townList.mainTown);\n\n  const { main, name, weather, wind, sys } = dataOfTown;\n  const { temp, feels_like, temp_min, temp_max, pressure, humidity } = main;\n  const { sunrise, sunset } = sys;\n  const weatherData = weather[0];\n  const windKmH = (wind.speed * 3.6).toFixed(2);\n  const sunUp = new Date((sunrise + 3600) * 1000).toUTCString().slice(-12, -4);\n  const sunDown = new Date((sunset + 3600) * 1000).toUTCString().slice(-12, -4);\n\n  const tempShow = temp < 0 && temp >= -0.49 ? 0 : temp.toFixed();\n  const feelsLikeShow =\n    feels_like < 0 && feels_like >= -0.49 ? 0 : feels_like.toFixed();\n  const minTempShow =\n    temp_min < 0 && temp_min >= -0.49 ? 0 : temp_min.toFixed();\n  const maxTempShow =\n    temp_max < 0 && temp_max >= -0.49 ? 0 : temp_max.toFixed();\n\n  let photoResult = greenVillage;\n\n  if (tempShow <= 0 || weatherData.icon.includes(\"13\")) {\n    photoResult = winter;\n  } else if (tempShow > 0 && tempShow <= 20) {\n    photoResult = greenVillage;\n  } else if (tempShow > 20) {\n    photoResult = summer;\n  }\n\n  if (weatherData.icon.includes(\"09\") || weatherData.icon.includes(\"10\")) {\n    photoResult = rain;\n  }\n\n  if (weatherData.icon.includes(\"11\")) {\n    photoResult = thunder;\n  }\n\n  return (\n    <div\n      className=\"resultView\"\n      style={{\n        backgroundImage: `url(\"${photoResult}\")`\n      }}\n    >\n      {/*ID just for scrollUp function*/}\n      <div className=\"resultView__wrapper\" id=\"resultView__wrapper\">\n        <h1 className=\"resultView__townName\">{name}</h1>\n\n        <div className=\"resultView__wrapperTemp\">\n          <h2 className=\"resultView__temp\">{tempShow}°C</h2>\n          <p className=\"resultView__maxMinTemp\">{`${maxTempShow}°C / ${minTempShow}°C`}</p>\n        </div>\n\n        <img\n          className=\"resultView__weatherIcon\"\n          src={`https://openweathermap.org/img/wn/${weatherData.icon}@2x.png`}\n          alt=\"Weather icon.\"\n        />\n\n        <div className=\"resultView__wrapperInfo\">\n          <p className=\"resultView__infoText\">\n            Opis:{\" \"}\n            <span className=\"resultView__info\">{weatherData.description}</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Odczuwalna:{\" \"}\n            <span className=\"resultView__info\">{feelsLikeShow}°C</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Ciśnienie: <span className=\"resultView__info\">{pressure} pHa</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Wilgotność: <span className=\"resultView__info\">{humidity}%</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Prędkość wiatru:{\" \"}\n            <span className=\"resultView__info\">{windKmH} km/h</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Wschód słońca: <span className=\"resultView__info\">{sunUp}</span>\n          </p>\n          <p className=\"resultView__infoText\">\n            Zachód słońca: <span className=\"resultView__info\">{sunDown}</span>\n          </p>\n        </div>\n\n        <div className=\"resultView__wrapperIcons\">\n          <BtnRefreshData />\n          <BtnShowSettings />\n        </div>\n\n        <p className=\"resultView__dateOfRefresh\">\n          Dane z: {dateOfData ? dateOfData : \"Brak danych\"}\n        </p>\n        <p className=\"resultView__mainTown\">\n          Główne miasto:{\" \"}\n          <span className=\"resultView__info\">\n            {mainTown ? mainTown : \"Brak danych\"}\n          </span>\n        </p>\n      </div>\n    </div>\n  );\n};\n","import { CHANGE_SETTINGS_INPUT_CONTENT, SETTINGS_INPUT_EMPTY } from \"../types\";\n\nexport const settingsInputContent = value => ({\n  type: CHANGE_SETTINGS_INPUT_CONTENT,\n  value: value\n});\n\nexport const settingsInputEmpty = isEmpty => ({\n  type: SETTINGS_INPUT_EMPTY,\n  isEmpty: isEmpty\n});\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { settingsInputContent } from \"../../../store/actions/settingsInputContentAction\";\nimport \"./SettingsInput.scss\";\n\nexport const SettingsInput = () => {\n  const value = useSelector(state => state.settingsInputContent.value);\n  const isEmpty = useSelector(state => state.settingsInputContent.isEmpty);\n  const dispatch = useDispatch();\n  const classes = isEmpty\n    ? \"settingsView__input settingsView__input--isEmpty\"\n    : \"settingsView__input\";\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={e => dispatch(settingsInputContent(e.target.value))}\n      className={classes}\n      placeholder=\"Nazwa miasta...\"\n    />\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchData } from \"../../../store/actions/fetchDataAction\";\nimport {\n  settingsInputContent,\n  settingsInputEmpty\n} from \"../../../store/actions/settingsInputContentAction\";\n\nexport const BtnCheckTown = () => {\n  const inputValue = useSelector(state => state.settingsInputContent.value);\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      className=\"settingsView__btnAddTown\"\n      onClick={() => {\n        if (inputValue === \"\") {\n          dispatch(settingsInputEmpty(true));\n          setTimeout(() => dispatch(settingsInputEmpty(false)), 2000);\n        } else {\n          const townWithoutExtraSpaces = inputValue.replace(/\\s+/g, \" \").trim();\n          dispatch(fetchData(townWithoutExtraSpaces));\n          dispatch(settingsInputContent(\"\"));\n        }\n      }}\n    >\n      Sprawdź miasto\n    </button>\n  );\n};\n","export const GetLocalMainTown = localStorage.getItem(\"mainTown\")\n  ? localStorage.getItem(\"mainTown\")\n  : \"Warszawa\";\n\nexport const SetLocalMainTown = mainTown =>\n  localStorage.setItem(\"mainTown\", mainTown);\n\nexport const GetLocalListOfTowns =\n  localStorage.getItem(\"favouriteTownsList\") === null ||\n  localStorage.getItem(\"favouriteTownsList\") === \"[]\"\n    ? [\"Warszawa\"]\n    : JSON.parse(localStorage.getItem(\"favouriteTownsList\"));\n\nexport const SetLocalListOfTowns = newListOfTowns =>\n  localStorage.setItem(\"favouriteTownsList\", JSON.stringify(newListOfTowns));\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchData } from \"../../../../store/actions/fetchDataAction\";\nimport { hideSettings } from \"../../../../store/actions/settingsVisibleActions\";\nimport \"./BtnCheckWeather.scss\";\n\nexport const BtnCheckWeather = ({ town }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      className=\"settingsView__btn\"\n      onClick={() => {\n        dispatch(fetchData(town));\n        dispatch(hideSettings());\n      }}\n    >\n      Sprawdź pogodę\n    </button>\n  );\n};\n","import {\n  ADD_TOWN_TO_LIST,\n  DELETE_TOWN_FROM_LIST,\n  DEFAULT_TOWN_STATE,\n  SET_MAIN_TOWN\n} from \"../types\";\n\nexport const addTownToList = townName => ({\n  type: ADD_TOWN_TO_LIST,\n  town: townName\n});\n\nexport const deleteTownFromList = townName => ({\n  type: DELETE_TOWN_FROM_LIST,\n  town: townName\n});\n\nexport const setMainTown = mainTown => ({\n  type: SET_MAIN_TOWN,\n  main: mainTown\n});\n\nexport const defaultState = () => ({ type: DEFAULT_TOWN_STATE });\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { SetLocalMainTown } from \"../../../../store/actions/localStorageActions\";\nimport { setMainTown } from \"../../../../store/actions/townsListActions\";\nimport \"./BtnSetMainTown.scss\";\n\nexport const BtnSetMainTown = ({ town }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      className=\"settingsView__btn\"\n      onClick={() => {\n        dispatch(setMainTown(town));\n        SetLocalMainTown(town);\n      }}\n    >\n      Główne miasto\n    </button>\n  );\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setMainTown,\n  deleteTownFromList\n} from \"../../../../store/actions/townsListActions\";\nimport {\n  SetLocalMainTown,\n  SetLocalListOfTowns\n} from \"../../../../store/actions/localStorageActions\";\nimport \"./BtnTrash.scss\";\n\nexport const BtnTrash = ({ town }) => {\n  const dispatch = useDispatch();\n  const mainTownRedux = useSelector(state => state.townList.mainTown);\n\n  return (\n    <i\n      className=\"fas fa-trash-alt settingsView__trashIcon\"\n      onClick={() => {\n        dispatch(deleteTownFromList(town));\n        if (town === mainTownRedux) {\n          dispatch(setMainTown(\"\"));\n          SetLocalMainTown(\"\");\n        }\n        SetLocalListOfTowns([]);\n      }}\n    ></i>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SetLocalListOfTowns } from \"../../../store/actions/localStorageActions\";\nimport { BtnCheckWeather } from \"./BtnCheckWeather/BtnCheckWeather\";\nimport { BtnSetMainTown } from \"./BtnSetMainTown/BtnSetMainTown\";\nimport { BtnTrash } from \"./BtnTrash/BtnTrash\";\nimport \"./FavouriteTownList.scss\";\n\nexport const FavouriteTownList = () => {\n  const townList = useSelector(state => state.townList.towns);\n  const mainTownRedux = useSelector(state => state.townList.mainTown);\n\n  SetLocalListOfTowns(townList);\n\n  const arrOfTowns = townList.map((town, index) => (\n    <li className=\"settingsView__listItem\" key={index}>\n      <div className=\"settingsView__wrapperIconName\">\n        {mainTownRedux === town ? (\n          <i className=\"fas fa-home settingsView__homeIcon\"></i>\n        ) : (\n          <i className=\"fas fa-home settingsView__homeIcon settingsView__homeIcon--disabled\"></i>\n        )}\n        <span className=\"settingsView__townName\">{town}</span>\n        <BtnTrash town={town} />\n      </div>\n\n      <div className=\"settingsView__wrapperBtn\">\n        {mainTownRedux === town ? null : <BtnSetMainTown town={town} />}\n        <BtnCheckWeather town={town} />\n      </div>\n    </li>\n  ));\n\n  const mainTown = arrOfTowns.find(\n    item =>\n      item.props.children[0].props.children[0].props.className ===\n      \"fas fa-home settingsView__homeIcon\"\n  );\n  const otherTowns = arrOfTowns.filter(item => item !== mainTown);\n\n  const showTowns = [mainTown, otherTowns.reverse()];\n\n  return (\n    <ul className=\"settingsView__favouriteList\">\n      {townList.length ? (\n        showTowns\n      ) : (\n        <li className=\"settingsView__listItem\">Brak danych.</li>\n      )}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { hideSettings } from \"../../../store/actions/settingsVisibleActions\";\nimport \"./CloseSettings.scss\";\n\nexport const CloseSettings = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <i\n      className=\"fas fa-times settingsView__close\"\n      onClick={() => dispatch(hideSettings())}\n    ></i>\n  );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { SetLocalListOfTowns } from \"../../../store/actions/localStorageActions\";\nimport { addTownToList } from \"../../../store/actions/townsListActions\";\nimport \"./BtnAddToList.scss\";\n\nexport const BtnAddToList = () => {\n  const currentTown = useSelector(state => state.fetchData.townData.name);\n  const currentTownList = useSelector(state => state.townList.towns);\n  const dispatch = useDispatch();\n\n  const isTownOnList = currentTownList.find(town => {\n    if (town === currentTown) return true;\n    return false;\n  });\n\n  const isTownOnListOrNoResult = isTownOnList || currentTown === \"Brak danych\";\n\n  const classNames = isTownOnListOrNoResult\n    ? \"settingsView__btnAddTown settingsView__btn--disabled\"\n    : \"settingsView__btnAddTown\";\n\n  return (\n    <button\n      disabled={isTownOnListOrNoResult}\n      className={classNames}\n      onClick={() => {\n        dispatch(addTownToList(currentTown));\n        SetLocalListOfTowns([...currentTownList, currentTown]);\n      }}\n    >\n      {isTownOnListOrNoResult ? (\n        \"Nic do dodania\"\n      ) : (\n        <p>\n          Dodaj {<span className=\"settingsView__TownToAdd\">{currentTown}</span>}{\" \"}\n          do listy\n        </p>\n      )}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SettingsInput } from \"./SettingsInput/SettingsInput\";\nimport { BtnCheckTown } from \"./BtnCheckTown/BtnCheckTown\";\nimport { FavouriteTownList } from \"./FavouriteTownList/FavouriteTownList\";\nimport { CloseSettings } from \"./CloseSettings/CloseSettings\";\nimport { BtnAddToList } from \"./BtnAddToList/BtnAddToList\";\nimport { settingsScrollUp } from \"../../store/actions/scrollsUp\";\nimport \"./SettingsView.scss\";\n\nexport const SettingsView = () => {\n  const isVisible = useSelector((state) => state.settingsVisible.isVisible);\n  const [visible, setVisible] = useState(0);\n  const animationSpeed = 10;\n\n  const settingsAnimation = (num) => {\n    setVisible(visible + num);\n  };\n\n  if (isVisible && visible < 100) {\n    setTimeout(() => settingsAnimation(5), animationSpeed);\n  }\n\n  if (!isVisible && visible > 0) {\n    settingsScrollUp();\n    setTimeout(() => settingsAnimation(-5), animationSpeed);\n  }\n\n  return (\n    <div\n      className=\"settingsView\"\n      id=\"settingsView\"\n      style={{\n        display: `${visible !== 0 ? \"block\" : \"none\"}`,\n        opacity: `${visible}%`,\n      }}\n    >\n      <div className=\"settingsView__wrapper\">\n        <h1 className=\"settingsView__title\">Ustawienia</h1>\n\n        <div className=\"settingsView__wrapperAddTown\">\n          <SettingsInput />\n          <BtnCheckTown />\n          <BtnAddToList />\n        </div>\n\n        <div className=\"settingsView__wrapperFavouriteList\">\n          <h3 className=\"settingsView__favouriteTitle\">\n            Lista ulubionych miast\n          </h3>\n          <FavouriteTownList />\n        </div>\n\n        <CloseSettings />\n\n        <p className=\"settingsView__author\">\n          Projekt i realizacja:{\" \"}\n          <a\n            className=\"settingsView__author--link\"\n            href=\"https://mkphercog.github.io/mywebsite\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Marcin Hercog\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./ErrorView.scss\";\n\nexport const ErrorView = () => {\n  const errorMessage = useSelector(state => state.fetchData.errorMessage);\n\n  return (\n    <div className=\"errorView\">\n      <h1 className=\"errorView__message\">{errorMessage}</h1>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./LoadingView.scss\";\n\nexport const LoadingView = () => (\n  <div className=\"loadingView\">\n    <i className=\"fas fa-sync-alt loadingView__icon\"></i>\n    <h1 className=\"loadingView__message\">Ładowanie</h1>\n  </div>\n);\n","import { DATA_FETCHING, DATA_FETCHED, DATA_ERROR } from \"../types\";\nimport NoResult from \"../../NoResult.json\";\n// import { GetLocalData } from \"../actions/localStorageActions\";\n\n// const localData = GetLocalData();\n\nconst INITIAL_STATE = {\n  featching: false,\n  featched: false,\n  townData: NoResult,\n  dateOfData: \"\",\n  error: false,\n  errorMessage: \"\"\n};\n\nexport const fetchTownReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case DATA_FETCHING:\n      return {\n        ...state,\n        featching: true,\n        featched: false,\n        townData: NoResult,\n        dateOfData: \"\",\n        error: false,\n        errorMessage: \"\"\n      };\n    case DATA_FETCHED:\n      return {\n        ...state,\n        featching: false,\n        featched: true,\n        townData: action.payload,\n        dateOfData: action.dateOfData,\n        error: false,\n        errorMessage: \"\"\n      };\n    case DATA_ERROR:\n      return {\n        ...state,\n        featching: false,\n        featched: false,\n        townData: NoResult,\n        dateOfData: \"\",\n        error: true,\n        errorMessage: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  ADD_TOWN_TO_LIST,\n  DELETE_TOWN_FROM_LIST,\n  DEFAULT_TOWN_STATE,\n  SET_MAIN_TOWN\n} from \"../types\";\nimport {\n  GetLocalMainTown,\n  GetLocalListOfTowns,\n  SetLocalMainTown\n} from \"../actions/localStorageActions\";\n\nconst INITIAL_TOWN = \"Warszawa\";\n\nconst INITIAL_STATE = {\n  towns: GetLocalListOfTowns,\n  mainTown: GetLocalMainTown\n};\n\nexport const townListReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ADD_TOWN_TO_LIST:\n      return {\n        ...state,\n        towns: [...state.towns, action.town]\n      };\n    case DELETE_TOWN_FROM_LIST:\n      const listWithoutTown = state.towns.filter(town => town !== action.town);\n      return { ...state, towns: listWithoutTown };\n    case DEFAULT_TOWN_STATE:\n      SetLocalMainTown(INITIAL_TOWN);\n      return {\n        ...state,\n        towns: [INITIAL_TOWN],\n        mainTown: INITIAL_TOWN\n      };\n    case SET_MAIN_TOWN:\n      return {\n        ...state,\n        mainTown: action.main\n      };\n    default:\n      return state;\n  }\n};\n","import { CHANGE_SETTINGS_INPUT_CONTENT, SETTINGS_INPUT_EMPTY } from \"../types\";\n\nconst INITIAL_STATE = {\n  value: \"\",\n  isEmpty: false\n};\n\nexport const settingsInputContentReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHANGE_SETTINGS_INPUT_CONTENT:\n      return {\n        ...state,\n        value: action.value,\n        isEmpty: false\n      };\n    case SETTINGS_INPUT_EMPTY:\n      return {\n        ...state,\n        isEmpty: action.isEmpty\n      };\n    default:\n      return state;\n  }\n};\n","import { SHOW_SETTINGS, HIDE_SETTINGS } from \"../types\";\n\nconst INITIAL_STATE = {\n  isVisible: false\n};\n\nexport const settingsVisibleReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SHOW_SETTINGS:\n      return {\n        ...state,\n        isVisible: true\n      };\n    case HIDE_SETTINGS:\n      return {\n        ...state,\n        isVisible: false\n      };\n    default:\n      return state;\n  }\n};\n","import { fetchTownReducer } from \"./fetchDataReducer\";\nimport { townListReducer } from \"./townsListReducer\";\nimport { settingsInputContentReducer } from \"./settingsInputContentReducer\";\nimport { settingsVisibleReducer } from \"./settingsVisibleReducer\";\nimport { combineReducers } from \"redux\";\n\nexport const rootReducer = combineReducers({\n  townList: townListReducer,\n  fetchData: fetchTownReducer,\n  settingsInputContent: settingsInputContentReducer,\n  settingsVisible: settingsVisibleReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers\";\n\nconst devTools = composeWithDevTools(applyMiddleware(thunk));\n\nexport const store = createStore(rootReducer, devTools);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./App/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ResultView } from \"./ResultView/ResultView\";\nimport { SettingsView } from \"./SettingsView/SettingsView\";\nimport { ErrorView } from \"./ErrorView/ErrorView\";\nimport { LoadingView } from \"./LoadingView/LoadingView\";\nimport { fetchData } from \"../store/actions/fetchDataAction\";\nimport { SetLocalMainTown } from \"../store/actions/localStorageActions\";\nimport { hideSettings } from \"../store/actions/settingsVisibleActions\";\nimport { setMainTown, defaultState } from \"../store/actions/townsListActions\";\nimport \"./App.scss\";\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const mainTown = useSelector(state => state.townList.mainTown);\n  const townsList = useSelector(state => state.townList.towns);\n  const isFeatching = useSelector(state => state.fetchData.featching);\n  const isError = useSelector(state => state.fetchData.error);\n\n  useEffect(() => {\n    SetLocalMainTown(mainTown);\n    dispatch(fetchData(mainTown));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchErrorResult = () => {\n    if (mainTown) {\n      //error but you still have main Town, so just refresh data of main town\n      dispatch(fetchData(mainTown));\n      dispatch(hideSettings());\n    } else if (townsList.length > 0) {\n      //error and you don't have main town, but you have list of favourite towns, so your main town will be random from list\n      const randomIndex = Math.floor(Math.random() * townsList.length);\n      SetLocalMainTown(townsList[randomIndex]);\n      dispatch(setMainTown(townsList[randomIndex]));\n    } else {\n      //error and you don't have main town and your list is empty, so return default state of app, with \"Warszawa\" in main town\n      localStorage.clear();\n      dispatch(defaultState());\n    }\n  };\n\n  if (isError) {\n    setTimeout(fetchErrorResult, 1500);\n  }\n\n  return (\n    <div className=\"app\">\n      <ResultView />\n      <SettingsView />\n      {isFeatching ? <LoadingView /> : null}\n      {isError ? <ErrorView /> : null}\n    </div>\n  );\n};\n"],"sourceRoot":""}